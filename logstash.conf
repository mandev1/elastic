input {
  syslog {
    host => "10.10.10.78"
    port => 5514
    type => "aruba-cx"
  }

  syslog {
    host => "10.10.10.78"
    port => 5516
    type => "sangfor"
  }
}

filter {
  #######################################
  # Aruba-CX Syslog
  #######################################
  if [type] == "aruba-cx" {
    # --- Parsing header syslog ---
    grok {
      match => {
        "message" => "<%{INT:syslog_pri}>1 %{TIMESTAMP_ISO8601:syslog_timestamp} %{HOSTNAME:hostname} %{WORD:appname} (?:%{INT:process_id}|-) - - %{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grok_syslog_fail"]
    }

    date {
      match => ["syslog_timestamp", "ISO8601"]
      target => "@timestamp"
      timezone => "Asia/Jakarta"
    }

    mutate { add_field => { "event_timestamp" => "%{syslog_timestamp}" } }

    # --- EVENT LOG umum ---
    if [msg] =~ /^Event\|/ {
      grok {
        match => {
          "msg" => [
            "Event\|%{INT:event_id}\|%{DATA:log_level}\|\|\|%{GREEDYDATA:event_message}",
            "Event\|%{INT:event_id}\|%{DATA:log_level}\|%{DATA:module}\|%{DATA:slot}\|%{GREEDYDATA:event_message}"
          ]
        }
        tag_on_failure => ["_grok_event_fail"]
      }
      mutate { convert => { "event_id" => "string" } }

      translate {
        field           => "event_id"
        destination     => "event_description"
        dictionary_path => "/etc/logstash/conf.d/aruba_event_description.yml"
        fallback        => "Unknown event ID"
        exact           => true
      }

      translate {
        field           => "event_id"
        destination     => "event_severity"
        dictionary_path => "/etc/logstash/conf.d/aruba_event_severity.yml"
        fallback        => "%{log_level}"
        exact           => true
      }
    }

    # --- CLI AUDIT ---
    if [msg] =~ /^AUDIT\|CLI/ {
      grok {
        match => {
          "msg" => "AUDIT\\|CLI \"%{DATA:cli_command}\" executed by user '%{DATA:user}' from address '%{IP:source_ip}' through %{DATA:access_method} session which resulted in %{WORD:result} at timezone %{DATA:timezone}\\."
        }
        tag_on_failure => ["_grok_cli_fail"]
      }
      mutate { rename => { "msg" => "event_message" } }
    }

    # --- SUDO ---
    if [appname] == "sudo" and [msg] =~ /COMMAND=/ {
      grok {
        match => {
          "msg" => "%{USER:user} : TTY=%{DATA:tty} ; PWD=%{DATA:pwd} ; USER=%{USER:runas_user} ; COMMAND=%{GREEDYDATA:sudo_command}"
        }
        tag_on_failure => ["_grok_sudo_fail"]
      }
      mutate { rename => { "msg" => "event_message" } }
    }

    # --- NGINX SSL handshake ---
    if [appname] == "nginx" {
      grok {
        match => {
          "msg" => "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME:nginx_timestamp} \\[%{LOGLEVEL:log_level}\\] %{INT:pid}#%{INT:tid}: \\*%{INT:conn_id} SSL_do_handshake\\(\\) failed \\(SSL: %{GREEDYDATA:ssl_error}\\) while SSL handshaking, client: %{IPV6:client_ip}, server: \\[::\\]:%{INT:server_port}"
        }
        tag_on_failure => ["_grok_nginx_fail"]
      }
      mutate {
        rename  => { "msg" => "event_message" }
        replace => { "event_timestamp" => "%{nginx_timestamp}" }
      }
      date {
        match => ["nginx_timestamp", "yyyy/MM/dd HH:mm:ss"]
        target => "@timestamp"
        timezone => "Asia/Jakarta"
      }
    }

    # --- SystemD pam_warn ---
    if [appname] == "systemd" {
      grok {
        match => {
          "msg" => "pam_warn\\(%{DATA:service}\\): function=\\[%{DATA:function}\\] flags=%{DATA:flags} service=\\[%{DATA:pam_service}\\] terminal=\\[%{DATA:terminal}\\] user=\\[%{DATA:user}\\] ruser=\\[%{DATA:ruser}\\] rhost=\\[%{DATA:rhost}\\]"
        }
        tag_on_failure => ["_grok_systemd_fail"]
      }
      mutate { rename => { "msg" => "event_message" } }
    }

    # --- systemd-logind ---
    if [appname] == "systemd-logind" {
      grok {
        match => {
          "msg" => [
            "New session %{DATA:session_id} of user %{WORD:user}\\.",
            "Removed session %{DATA:session_id}\\."
          ]
        }
        tag_on_failure => ["_grok_logind_fail"]
      }
      mutate { add_field => { "event_message" => "%{msg}" } }
    }

    # --- log-proxyd ---
    if [appname] == "log-proxyd" {
      grok {
        match => { "msg" => "Event\\|%{INT:event_id}\\|%{DATA:log_level}\\|%{WORD:module}\\|%{DATA:session}\\|%{GREEDYDATA:event_message}" }
        tag_on_failure => ["_grok_logproxyd_fail"]
      }
    }

    # --- hpe-restd ---
    if [appname] == "hpe-restd" {
      grok {
        match => {
          "msg" => [
            "Event\\|%{INT:event_id}\\|%{DATA:log_level}\\|%{DATA:module}\\|%{DATA:session}\\|Certificate %{DATA:certificate} verified and accepted",
            "Event\\|%{INT:event_id}\\|%{DATA:log_level}\\|%{DATA:module}\\|%{DATA:session}\\|Certificate %{DATA:certificate} is cryptographically validated by CA certificate %{GREEDYDATA:ca_issuer}"
          ]
        }
        tag_on_failure => ["_grok_hperestd_fail"]
      }
      mutate { convert => { "event_id" => "string" } }
      translate {
        field           => "event_id"
        destination     => "event_description"
        dictionary_path => "/etc/logstash/conf.d/aruba_event_description.yml"
        fallback        => "Unknown event ID"
        exact           => true
      }
      translate {
        field           => "event_id"
        destination     => "event_severity"
        dictionary_path => "/etc/logstash/conf.d/aruba_event_severity.yml"
        fallback        => "%{log_level}"
        exact           => true
      }
    }

    # --- hpe-pvstd ---
    if [appname] == "hpe-pvstd" {
      grok {
        match => { "msg" => "Event\\|%{INT:event_id}\\|%{DATA:log_level}\\|%{WORD:module}\\|%{DATA:session}\\|Topology change received on port %{WORD:interface} from source: %{MAC:src_mac} on VLAN %{INT:vlan}" }
        tag_on_failure => ["_grok_pvstd_fail"]
      }
      mutate { convert => { "event_id" => "string" } }
      translate {
        field           => "event_id"
        destination     => "event_description"
        dictionary_path => "/etc/logstash/conf.d/aruba_event_description.yml"
        fallback        => "Unknown event ID"
        exact           => true
      }
      translate {
        field           => "event_id"
        destination     => "event_severity"
        dictionary_path => "/etc/logstash/conf.d/aruba_event_severity.yml"
        fallback        => "%{log_level}"
        exact           => true
      }
    }

    # --- SSHD logs ---
    if [appname] == "sshd" {
      grok {
        match => {
          "msg" => [
            "Disconnected from %{IP:src_ip} port %{INT:src_port} \\[%{DATA:auth_stage}\\]",
            "Received disconnect from %{IP:src_ip} port %{INT:src_port}: reason %{INT:reason_code}: *%{GREEDYDATA:reason_msg} \\[%{DATA:auth_stage}\\]"
          ]
        }
        tag_on_failure => ["_grok_sshd_fail"]
      }
      mutate { rename => { "msg" => "event_message" } }
    }

    # --- Fallback ---
    if [msg] and ![event_message] {
      mutate { add_field => { "event_message" => "%{msg}" } }
    }

    if [msg] and [msg] !~ /^Event\|/ and [appname] not in ["sudo","nginx","systemd","systemd-logind","log-proxyd","hpe-restd","hpe-pvstd","sshd"] {
      grok {
        match => {
          "msg" => "%{TIMESTAMP_ISO8601:fallback_time} \\[%{LOGLEVEL:log_level}\\] %{DATA:error_detail} %{GREEDYDATA:event_message}"
        }
        tag_on_failure => ["_grok_msg_fail"]
      }
      date {
        match => ["fallback_time", "ISO8601"]
        target => "@timestamp"
        timezone => "Asia/Jakarta"
      }
      mutate { replace => { "event_timestamp" => "%{fallback_time}" } }
    }

    # --- Metadata tambahan ---
    mutate {
      add_field => {
        "device_vendor" => "Aruba"
        "device_type"   => "Switch"
      }
    }
  }

  #######################################
  # Sangfor Logs
  #######################################
  else if [type] == "sangfor" {
    grok {
      match => { "message" => [
        "<%{INT:syslog_pri}> %{TIMESTAMP_ISO8601:log_timestamp} %{INT:log_level} %{IP:src_ip} %{WORD:device_name}\\*\\|%{NUMBER:session_id}\\*\\|%{USERNAME:username} \\(%{IP:user_ip}\\)\\*\\|%{WORD:system_module}\\*\\|%{TIMESTAMP_ISO8601:event_time}\\*\\|%{DATA:event_action}\\*\\|%{WORD:auth_status}\\*\\|%{GREEDYDATA:event_message}\\*\\|%{INT:event_code}\\*\\|"
      ]}
      tag_on_failure => ["_grok_sangfor_fail"]
    }

    mutate {
      convert => {
        "session_id" => "integer"
        "event_code" => "integer"
      }
    }

    date {
      match => ["event_time", "ISO8601"]
      target => "@timestamp"
      timezone => "Asia/Jakarta"
    }

    mutate {
      add_field => {
        "device_vendor" => "Sangfor"
        "device_type"   => "HCI"
      }
    }
  }
}

output {
  if [type] == "aruba-cx" {
    elasticsearch {
      hosts    => ["https://10.10.10.78:9200"]
      index    => "core_switch-logs-%{+YYYY.MM.dd}"
      user     => "elastic"
      password => "B4ndung!@#"
      ssl      => true
      ssl_certificate_verification => false
    }
    file {
      path  => "/var/log/logstash/Core-Switch/Core-%{+YYYY-MM-dd}.log"
      codec => json_lines
    }
  }

  else if [type] == "sangfor" {
    elasticsearch {
      hosts    => ["https://10.10.10.78:9200"]
      index    => "sangfor-logs-%{+YYYY.MM.dd}"
      user     => "elastic"
      password => "B4ndung!@#"
      ssl      => true
      ssl_certificate_verification => false
    }
    file {
      path  => "/var/log/logstash/Sangfor/Sangfor-%{+YYYY-MM-dd}.log"
      codec => json_lines
    }
  }
}
